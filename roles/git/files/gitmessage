

# <type>(<scope>): <subject>
# <BLANK LINE>
# <body>
# <BLANK LINE>
# <footer>
#
# ** TYPES **:
#
# See: https://www.conventionalcommits.org/en/v1.0.0/
#
# - build/chore: Changes that affect the build system or external dependencies
#                (example scopes: gulp, broccoli, npm)
# - ci: Changes to the CI configuration files and scripts
#       (example scopes: Travis, Circle, BrowserStack, SauceLabs)
# - docs: Documentation only changes
# - feat: A new feature
# - fix: A bug fix
# - perf: A code change that improves performance
# - refactor: A code change that neither fixes a bug nor adds a feature
# - style: Changes that do not affect the meaning of the code
#          (white-space, formatting, missing semi-colons, etc)
# - test: Adding missing tests or correcting existing tests
# - wip: Work in progress, commit must be squashed -- do not push!
#
# ** Subject **:
#
# The subject contains a succinct description of the change.
# Use the imperative, present tense: "change" not "changed" nor "changes"
# don't capitalize the first letter
# no dot (.) at the end
#
# ** Body **:
#
# Just as in the summary, use the imperative,
# present tense: "fix" not "fixed" nor "fixes".
#
# Explain the motivation for the change in the commit message body.
# This commit message should explain why you are making the change.
# You can include a comparison of the previous behavior with the new behavior
# in order to illustrate the impact of the change.
#
# ** FOOTERS **:
#
# The footer can contain information about breaking changes and deprecations
# and is also the place to reference GitHub issues, Jira tickets, #
# and other PRs that this commit closes or is related to.
#
# The footer should contain any information about Breaking Changes
# and Deprecation
# and is also the place to reference GitHub issues that this commit Closes.
#
# Closed bugs should be listed on a separate line in the footer
# prefixed with "Closes" or "Fixes" keyword like this
# Closes #123, #245, #992
#
# Breaking Change section should start with the phrase "BREAKING CHANGE: "
# followed by a summary of the breaking change, a # blank line, and a detailed
# description of the breaking change that also includes migration instructions.
#
# Similarly, a Deprecation section should start with "DEPRECATED: "
# followed by a short description of what is deprecated, a # blank line,
# and a detailed description of the deprecation that also mentions the
# recommended update path.
#
# ** Funtip **:
#
# Consider adding a relevant emoji to the commit messages: https://gitmoji.dev/
#
