---
- name: Install brew packages
  community.general.homebrew:
    name: "{{ item }}"
    state: latest
  loop: "{{ gpg_brew_packages }}"

# This ensure that the directory exists as `ansible.builtin.template` does not create it
- name: Copy custom configuration to {{ xdg_config_home }}
  ansible.builtin.copy:
    src: "./files/config/" # trailing / is important to copy only directory content and not the directory itself
    dest: "{{ xdg_config_home }}/gpg"
    mode: "0600"

- name: Copy custom gitconfig to {{ xdg_config_home }}
  ansible.builtin.template:
    src: "gpg-agent.conf.j2"
    dest: "{{ xdg_config_home }}/gpg/gpg-agent.conf"
    mode: "0600"

- name: Create a symbolic link to custom .gnupg
  ansible.builtin.file:
    src: "{{ xdg_config_home }}/gpg"
    dest: "~/.gnupg"
    state: link

- name: Create shell config file in {{ shell_config_dir }}
  ansible.builtin.blockinfile:
    create: true
    marker: "# {mark} - ANSIBLE MANAGED BLOCK"
    insertbefore: BOF # Beginning of file
    path: "{{ shell_config_dir }}/{{ item | basename }}"
    block: "{{ lookup('ansible.builtin.file', './shell_config/{{ item | basename }}') }}"
    mode: "0600"
  loop: "{{ lookup('ansible.builtin.fileglob', './shell_config/*.zsh', wantlist=True) }}"

- name: Set checkbox "Save to Keychain" to disabled by default in pinentry-mac
  community.general.osx_defaults:
    domain: org.gpgtools.pinentry-mac
    key: UseKeychain
    type: bool
    value: false
    state: present
# Useful gpg commands:
# - Generate a key:
#   gpg --full-generate-key
# - List secret keys:
#   gpg --list-secret-keys --keyid-format=long
# - List public keys:
#   gpg --list-keys --keyid-format=long
# - Export public key:
#   gpg --armor --export <KEY_ID or email> --output ./public_pgp.key
# - Export private key:
#   # /!\ This command is normally not necessary.
#   # /!\ Be careful with the output file, securely delete it using "shred -zu ./private_pgp.key"
#   gpg --armor --export-secret-keys <KEY_ID or personal_email> --output ./private_pgp.key
# - Import private or public key:
#   gpg --import some_pgp.key
# - Sign an imported public key (tells gpg that you trust the person the key claims to be)
#   gpg --default-key <KEY_ID or personal_email> --sign-key <contact_email>
# - Test Signature
#   echo "test" | gpg --default-key <KEY_ID or personal_email> --clear-sign | gpg --verify
# - Test encryption/decryption
#   echo "test" | gpg --encrypt --recipient "<personal_email>" | gpg --decrypt
# - Encrypt file with a person public key, optionally sign using your private key to certify the message is from you
#   gpg --armor [--default-key "<KEY_ID or personal_email>" --sign] --encrypt --recipient <contact_email> --output ./file.txt.gpg  ./file.txt
# - Decrypt file:
#   gpg --decrypt --output ./file.txt ./file.txt.gpg
