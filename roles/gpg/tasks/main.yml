---
- name: Select macos package
  when: ansible_system == "Darwin"
  set_fact:
    gpg_package: "{{ gpg_brew_package }}"

- name: Select linux package
  when: ansible_system == "Linux"
  set_fact:
    gpg_package: "{{ gpg_linux_package }}"

- name: Install gpg
  package:
    name: "{{ gpg_package }}"
    state: latest

- name: Ansible check gpg directory exists
  stat:
    path: "{{ gpg_config_dir }}"
  register: directory_details

- name: Ensure gpg directory exists
  when: not (directory_details.stat.exists and directory_details.stat.isdir)
  file:
    path: "{{ gpg_config_dir }}"
    state: directory
    mode: 0700

- name: Create a symbolic link to custom .gnupg
  file:
    src: "{{ gpg_config_dir }}"
    dest: "~/.gnupg"
    state: link

- name: Copy Custom gpg configuration to {{ gpg_config_dir }}
  copy:
    src: "./files/" # trailing / is important to copy only files within the directory
    dest: "{{ gpg_config_dir }}"
    mode: 0600

- name: Manage configuration file
  when: gpg_shell_config_file != ""
  block:
    - name: Check config files exists
      stat:
        path: "{{ gpg_shell_config_file }}"
      register: file_details

    - name: Ensure config files exists
      when: not file_details.stat.exists
      file:
        path: "{{ gpg_shell_config_file }}"
        state: touch
        mode: 0600

    - name: Create config file
      blockinfile:
        marker: "# {mark} - GPG - ANSIBLE MANAGED BLOCK"
        insertafter: EOF
        path: "{{ gpg_shell_config_file }}"
        block: |
          # Aliases

          # Configure gpg
          if command -v gpg &>/dev/null; then
            if [[ "${SHELL}" =~ 'zsh' ]]; then
              export GPG_TTY=${TTY}
            else 
              export GPG_TTY=$(tty)
            fi
          fi

- debug:
    msg: |
      Useful gpg commands:
      - Generate a key:
        gpg --full-generate-key
      - List secret keys:
        gpg --list-secret-keys --keyid-format=long
      - List public keys:
        gpg --list-keys --keyid-format=long
      - Export public key:
        gpg --armor --export <KEY_ID or email> --output ./public_pgp.key
      - Export private key:
        # /!\ This command is normally not necessary. 
        # /!\ Be careful with the output file, securely delete it using "shred -zu ./private_pgp.key"
        gpg --armor --export-secret-keys <KEY_ID or personal_email> --output ./private_pgp.key
      - Import private or public key:
        gpg --import some_pgp.key
      - Sign an imported public key (tells gpg that you trust the person the key claims to be)
        gpg --default-key <KEY_ID or personal_email> --sign-key <contact_email>
      - Test Signature
        echo "test" | gpg --default-key <KEY_ID or personal_email> --clear-sign | gpg --verify
      - Test encryption/decryption
        echo "test" | gpg --encrypt --recipient "<personal_email>" | gpg --decrypt
      - Encrypt file with a person public key, optionally sign using your private key to certify the message is from you
        gpg --armor [--default-key "<KEY_ID or personal_email>" --sign] --encrypt --recipient <contact_email> --output ./file.txt.gpg  ./file.txt
      - Decrypt file:
        gpg --decrypt --output ./file.txt ./file.txt.gpg
